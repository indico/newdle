# A random string that is secret.
SECRET_KEY = None

# How long a login token is valid.
TOKEN_LIFETIME = 12*3600

# The connection string for your Postgres database.
SQLALCHEMY_DATABASE_URI = 'postgresql:///newdle'

# The Flask-Multipass auth provider settings. Currently only one provider is supported,
# and it has to be a 'remote' (redirect to an SSO page) one.
# The default here should work with any OIDC-compatible system and only requires you to
# provide the metadata url and client id+secret.
MULTIPASS_AUTH_PROVIDER_LOGIN = {
    'type': 'authlib',
    'authlib_args': {
        'server_metadata_url': 'https://.../.well-known/openid-configuration',
        'client_id': '',
        'client_secret': '',
        'client_kwargs': {'scope': 'openid'}
    }
}

# The Flask-Multipass identity provider settings. Currently only one provider is supported
# and it needs to provide the following data keys: email, name
MULTIPASS_IDENTITY_PROVIDER_LOGIN = {'type': 'authlib'}

# The Flask-Multipass identity provider settings used to search for existing people.
# This may be the same as `MULTIPASS_IDENTITY_PROVIDER`.
MULTIPASS_IDENTITY_PROVIDER_SEARCH = None

# Whether to completely skip the login process and use a dummy user.
# This is obviously a very bad idea in production, but may be useful
# for development when SSO is not available.
SKIP_LOGIN = False

# Whether the application is behind a proxy.
# When set to true, the following headers will be used:
# - X-Forwarded-For
# - X-Forwarded-Host
# - X-Forwarded-Proto
PROXY = False

# The length of (random) newdle codes (used in the URL)
NEWDLE_CODE_LENGTH = 8

# Specify which cache to use to store e.g. OAuth credentials
# See the documentation of Flask-Caching for a list of available
# cache types and their configuration options:
# https://flask-caching.readthedocs.io/en/latest/#configuring-flask-caching
CACHE_TYPE = 'simple'


# Specify how emails are sent. For production use, you need the `smtp` backend,
# but for development you may want to use `console` instead, which simply prints
# the raw emails to stdout.
EMAIL_BACKEND = 'newdle.vendor.django_mail.backends.smtp.EmailBackend'

# When using the SMTP backend, specify how to connect to the SMTP server.
# Documentation for these settings can be found in the Django Email docs:
# https://docs.djangoproject.com/en/2.2/topics/email/#smtp-backend
EMAIL_HOST = 'localhost'
EMAIL_PORT = 25
EMAIL_HOST_USER = None
EMAIL_HOST_PASSWORD = None
EMAIL_USE_TLS = False
EMAIL_USE_SSL = False
EMAIL_TIMEOUT = 10

# All emails sent on behalf of users are sent from the noreply address, with
# the user's real email in Reply-to and the human-friendly From name.
NOREPLY_ADDRESS = 'noreply@example.com'


# Free/busy provider configuration
# FREE_BUSY_PROVIDERS = {'exchange'}
# Random provider: just random data to test the application
FREE_BUSY_PROVIDERS = {'random'}

# Exchange free/busy configuration
#
# This would normally look more or less like:
# EXCHANGE_DOMAIN = 'acme.com'
# EXCHANGE_PROVIDER_SERVER = 'ews.acme.com'
# EXCHANGE_PROVIDER_ACCOUNT = 'my_username@acme.com'
# EXCHANGE_PROVIDER_CREDENTIALS = ('MYDOMAIN\\my_username', 'super_secret_passworD_')

EXCHANGE_DOMAIN = ''
EXCHANGE_PROVIDER_SERVER = ''
EXCHANGE_PROVIDER_ACCOUNT = ''
EXCHANGE_PROVIDER_CREDENTIALS = ('', '')

# OX free/busy configuration
#
# Example config:
# OX_PROVIDER_URL = 'https://acme.com/servlet/webdav.freebusy'
# OX_PROVIDER_USERNAME = 'ox_api_username'
# OX_PROVIDER_PASSWORD = 'ox_api_password'
# OX_PROVIDER_CONTEXT_ID = 1
# Maximum amount of weeks into the future to fetch allowed by the provider (optional, defaults to 4)
# https://documentation.open-xchange.com/components/middleware/rest/7.10.4/index.html#!InternetFreeBusy/getFreeBusy
# OX cuts off the last day so that the duration is exactly the number of weeks instead of
# providing data until 23:59 of the last day. To cover the last day, newdle requests data for an extra week.
# For this reason, this setting should be 1 greater than the effective number of weeks.
# OX_PROVIDER_MAX_WEEKS = 4
OX_PROVIDER_URL = ''
OX_PROVIDER_USERNAME = ''
OX_PROVIDER_PASSWORD = ''
OX_PROVIDER_CONTEXT_ID = 1
OX_PROVIDER_MAX_WEEKS = 4

# Cleanup configuration (values are in days)
# Days after which an incomplete newdle is deleted after its last update.
LAST_ACTIVITY_CLEANUP_DELAY = None
# Days after which a newdle with a final date is deleted.
FINAL_DATE_CLEANUP_DELAY = None
# Days after which a newdle that was deleted by its creator is cleaned up.
DELETED_CLEANUP_DELAY = None

# Footer content configuration
# Specify which links are shown in the footer using `('title', 'url')` pairs
FOOTER_LINKS = []

# If set, newdle will show a button to create an Indico event using the title
# and time from the newdle.  Other applications besides Indico (3.0+) could be
# used as well as long as they implement the same API as Indico has.
CREATE_EVENT_URL = ''
