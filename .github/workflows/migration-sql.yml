name: Alembic consistency check

on:
  pull_request_target:
    branches: [master]

jobs:
  check-alembic:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Get list of created migrations
        id: get-changed-files
        uses: ThiefMaster/changed-files-action@json-output
        with:
          repo-token: ${{ github.token }}
          pattern: '^newdle/migrations/versions/.+\.py$'

      - name: Check if any migrations changed
        id: migrations-changed
        run: |
          echo ::set-output name=changed::${{ steps.get-changed-files.outputs.files_created != '[]' || steps.get-changed-files.outputs.files_updated != '[]' || steps.get-changed-files.outputs.files_deleted != '[]' }}

      - name: Setup venv and config file
        if: steps.migrations-changed.outputs.changed == 'true'
        run: |
          make config
          make env
          pip install -q -e '.[dev]'

      - name: Activate virtualenv for later steps
        if: steps.migrations-changed.outputs.changed == 'true'
        run: |
          echo "::set-env name=VIRTUAL_ENV::$(pwd)/.venv"
          echo "::add-path::$(pwd)/.venv/bin"

      - name: Check history consistency
        if: steps.migrations-changed.outputs.changed == 'true'
        run: python ./ci/check_history_consistency.py

      - name: Print changed migrations
        if: steps.migrations-changed.outputs.changed == 'true'
        id: get-comment-body
        run: |
          first_migration=$(jq -r '.[0] // empty' ~/files_created.json)
          latest_migration=$(jq -r '.[-1] // empty' ~/files_created.json)
          sql_command=$(./ci/print_revision_sql.sh $first_migration $latest_migration)
          if [ ! -z "$sql_command" ] ; then
            echo ::set-output name=body::$sql_command
          fi

      - name: Find previous comment
        uses: peter-evans/find-comment@v1
        id: find-comment
        with:
          issue-number: ${{ github.event.number }}
          body-includes: This PR contains database changes.
          comment-author: github-actions[bot]

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        if: steps.get-comment-body.outputs.body
        with:
          issue-number: ${{ github.event.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            This PR contains database changes. Before merging it, make sure to apply the migration in production:

            ```sql
            ${{ steps.get-comment-body.outputs.body }}
            ```

            When reviewing the PR, make sure that the changes will not break the previously deployed
            version, i.e. any new column needs to have a `server_default` or be nullable.

      - name: Delete comment
        uses: peter-evans/create-or-update-comment@v1
        if: steps.find-comment.outputs.comment-id && !steps.get-comment-body.outputs.body
        with:
          issue-number: ${{ github.event.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ~~This PR contains database changes.~~
